name: Run Ansible Playbook

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select an environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - nonprod
          - prod
          - prometheus
          - tiny

      playbook:
        description: "Select a playbook to run"
        required: true
        default: "provision-ad"
        type: choice
        options:
          - deploy-microsofy-sql
          - provision-ad
          - add-local-admins
          - deploy-system-pulse
          - deploy-kuiper

      limit:
        description: "Limit playbook to specific host or group (optional)"
        required: false
        default: ""
        type: string

      check_mode:
        description: "Run in Ansible check mode?"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  run-ansible:
    name: Run ${{ github.event.inputs.playbook }} (${{ github.event.inputs.environment }})
    runs-on: [self-hosted, linux]
    environment: ${{ github.event.inputs.environment }}

    env:
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create and Activate Python venv
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install botocore boto3 ansible-lint pypsrp pywinrm "requests[socks]"

      - name: Install Ansible Collections
        run: |
          source venv/bin/activate
          ansible-galaxy collection install \
            amazon.aws community.aws ansible.utils community.windows \
            ansible.windows ansible.posix community.general microsoft.ad

      - name: Install Ansible Roles
        run: |
          mkdir -p roles
          cd roles
          git clone https://github.com/Sapphire-Health/ansible-role-aws-linux-storage.git aws_linux_storage
          git clone https://github.com/Sapphire-Health/ansible-role-azure-linux-storage.git azure_linux_storage
          git clone https://github.com/Sapphire-Health/ansible-role-azure-windows-storage.git azure_windows_storage
          git clone https://github.com/Sapphire-Health/ansible-role-aws-windows-storage.git aws_windows_storage
          git clone https://github.com/Sapphire-Health/ansible-role-microsoft-sql.git microsoft_sql
          git clone https://github.com/Sapphire-Health/ansible-role-kuiper.git kuiper
          git clone https://github.com/Sapphire-Health/ansible-role-system-pulse.git system_pulse
          git clone https://github.com/Sapphire-Health/ansible-role-smtp.git smtp
          git clone https://github.com/Sapphire-Health/ansible-role-prometheus.git prometheus
          ansible-galaxy role install linux-system-roles.storage

      - name: Run Ansible Playbook
        run: |
          source venv/bin/activate
          LIMIT_FLAG=""
          if [ -n "${{ github.event.inputs.limit }}" ]; then
            LIMIT_FLAG="--limit '${{ github.event.inputs.limit }}'"
          fi

          if [ "${{ github.event.inputs.check_mode }}" = "true" ]; then
            ansible-playbook -i inventory.aws_ec2.yml $LIMIT_FLAG playbook-${{ github.event.inputs.playbook }}.yml --check
          else
            ansible-playbook -i inventory.aws_ec2.yml $LIMIT_FLAG playbook-${{ github.event.inputs.playbook }}.yml
          fi
